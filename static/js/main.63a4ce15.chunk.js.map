{"version":3,"sources":["Components/CheckoutForm/index.js","App.js","serviceWorker.js","index.js"],"names":["injectStripe","props","_useState","useState","_useState2","Object","slicedToArray","isComplete","setComplete","localStorage","setItem","JSON","stringify","getItem","react_default","a","createElement","es","onClick","event","stripe","createToken","name","then","result","fetch","method","headers","Content-Type","body","token","id","fetchedResult","ok","console","log","App","apiKey","Components_CheckoutForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAyCeA,6BAtCf,SAAsBC,GAAO,IAAAC,EACOC,oBAAS,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpBK,EADoBH,EAAA,GACRI,EADQJ,EAAA,GA2B3B,OAtBAK,aAAaC,QAAQ,SAAUC,KAAKC,UAAUX,IAE9CQ,aAAaI,QAAQ,UAoBjBN,EAAmBO,EAAAC,EAAAC,cAAA,gCAGrBF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAACC,EAAA,YAAD,MACAH,EAAAC,EAAAC,cAAA,UAAQE,QAxBG,SAAAC,GACblB,EAAMmB,OAAOC,YAAY,CAAEC,KAAM,SAAUC,KAAK,SAAAC,GAC9CC,MAAM,UAAW,CACfC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,cAC3BC,KAAML,EAAOM,MAAMC,KAClBR,KAAK,SAAAS,GACFA,EAAcC,IAChBC,QAAQC,IAAI,aACZ3B,GAAY,IAEZ0B,QAAQC,IAAI,aAIlBD,QAAQC,IAAIlC,KASV,eCpBSmC,MAZf,WACE,OACEtB,EAAAC,EAAAC,cAACC,EAAA,eAAD,CAAgBoB,OAAO,oCACrBvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACsB,EAAD,UCGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.63a4ce15.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { CardElement, injectStripe } from 'react-stripe-elements';\n\nfunction CheckoutForm(props) {\n  const [isComplete, setComplete] = useState(false);\n\n  //localStorage is like a `save` button for your browser. This is displayed\n  //   in the `Local Storage` shown in the Application tab of Chrome developer\n  localStorage.setItem('proppy', JSON.stringify(props));\n\n  localStorage.getItem('proppy');\n\n  const submit = event => {\n    props.stripe.createToken({ name: 'Name' }).then(result => {\n      fetch('/charge', {\n        method: 'POST',\n        headers: { 'Content-Type': 'text/plain' },\n        body: result.token.id\n      }).then(fetchedResult => {\n        if (fetchedResult.ok) {\n          console.log('COMPLETED');\n          setComplete(true);\n        } else {\n          console.log('ERROR');\n        }\n      });\n    });\n    console.log(props);\n  };\n\n  if (isComplete) return <h1>PURCHASE COMPLETED</h1>;\n\n  return (\n    <div>\n      <p>Would you like to complete the purchase?</p>\n      <CardElement />\n      <button onClick={submit}>Purchase</button>\n    </div>\n  );\n}\n\nexport default injectStripe(CheckoutForm);\n","import React from 'react';\nimport CheckoutForm from './Components/CheckoutForm';\nimport { Elements, StripeProvider } from 'react-stripe-elements';\n\nfunction App() {\n  return (\n    <StripeProvider apiKey='pk_test_TYooMQauvdEDq54NiTphI7jx'>\n      <div>\n        <Elements>\n          <CheckoutForm />\n        </Elements>\n      </div>\n    </StripeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}